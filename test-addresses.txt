// update this as needed by redeploying smart contracts to new instances of local ganache blockchain. 
test_uniswap_factory = 0xea4a45E7FF00D5a69472a9AeB1E6AE54C07C6962
test_WETH = 0x3db38A60B4af700fB3ee24d0CEF3Fa3604fC499D
test_uniswap_router = 0xB1Ffd5BA1fdE7Abe45b0b161e491c0fA8dFEF92B;
zero_address = 0x0000000000000000000000000000000000000000;
1616657019
1616743424
Steps when deploying xStarterPoolPair

BEFORE THE ILO
Step 1: 
Deploy xStarterPoolPair smart contract Args:

USE THIS STRING substituting admin ADMINADDRESS with your own address:
"0x16345C0152763Aed9BB32dF124b33200650d4228","70", "1", "1000","1800","60", "10000000000000000", "10000000000000000", "1000000000000000000", "0x0000000000000000000000000000000000000000",
"0xB1Ffd5BA1fdE7Abe45b0b161e491c0fA8dFEF92B", "0xea4a45E7FF00D5a69472a9AeB1E6AE54C07C6962"

USE THIS FOR SUCCESSFULL ILO: 
"0x16345C0152763Aed9BB32dF124b33200650d4228","70", "1", "15500000","1800","60", "10000000000000000", "10000000000000000", "1000000000000000000", "0x0000000000000000000000000000000000000000",
"0xB1Ffd5BA1fdE7Abe45b0b161e491c0fA8dFEF92B", "0xea4a45E7FF00D5a69472a9AeB1E6AE54C07C6962"

address adminAddress = address of admin. xStarterPoolPair will be deployed by xStarterLaunchPad, so this passes the msg.sender to xStarterPoolPair
uint8 percentOfTokensForILO_ = should be between 1 and 100 (all inclusive) and represent percent of total tokens for ILO (ideal is 70% or more)
uint24 fundTokenReceive_ = 
    swapRatio = fund token received - tells how much funding token to receive per
uint24 projectTokenGive_ = 
    swapRatio = project token given - tells how much project tokens to give fund token ie 1 fundTokenReceive_ to 100 projectTokenGive_
    this means for every 1 funding token, the project gives 100 project tokens.
uint24 dexDeadlineLength_ = 
    the deadline for dex liquidity pool creation tx  1800 seconds (default for frontend)
uint48 contribTimeLock_ = 
    the length of the timelock in seconds for contributors tokens (before they're able to withdraw it, THIS also creates a block number lock)
    so locks are when block.time > timelock && block.number = blockLock
uint minPerSwap_ = 
    the minimum allowed funding token per swap when calling NativeTokenSwap or FundingTokenSwap
uint minFundPerAddr_ =
    min funding tokens allowed to contribute per wallet address
uint maxFundPerAddr_ = 
    max funding tokens allowed to contribute per wallet address
address fundingToken_ =
    the fundingToken_ to use. if trying to accept native tokens (ie ETH on ethereum network or xDai on xDai network) use zero_address
    if fundingToken is native token then swap must be through NativeTokenSwap function else use FundingTokenSwap
address addressOfDex_ = 
    the address of the DEX router to use. This would be set to Honeyswap dex on xDai chain or any other dex. DEX must be in approved dex list, 
    approved by the community
address addressOfDexFactory_ = 
    related to DEX, but the address of dex factory of dex.

STEP 2
admin calls setUpPoolPair function Args:
USE command in a js console and then copy the string then add start time and end time:
CMD:
console.log('"0x0000000000000000000000000000000000000000",','"xyz",','"xyz", ', '"18", ','"500000000",',`"${parseInt(Date.now() / 1000) + 120}", ` , `"${parseInt(Date.now() / 1000) + 240}"`)

address addressOfProjectToken =
    address of projet token. If this is zero address, then the contract deploys one using the provided information
string memory tokenName_ =
    tokenName used to verify the address, or deploy new token contract
string memory tokenSymbol_ =
    token symbol to verify existing token or deploy
uint8  decimals_ = decimals of tokens, 18 is standard
uint totalTokenSupply_ = 
    total token supply, this is verified by what is provided by deployer (which is voted on by the community)
uint48 startTime_ = 
    start time of ILO (sets block start number also)
uint48 endTime_ = 
    end time of ILO (sets block end number also)
    
    
STEP 3
admin calls depositAllTokenSupply function. 
If project token was deployed by the smart contract, this will revert with 'already deposited' message.
If it wasn't admin must approve ALL token supply and set spender address as the ILO contract.
Once Approve, calling this will move move the tokens to the contract's balance.
NO PARAMS


DURING THE ILO
Once the start time and start block has been reached, the ILO is consided opened
Users can check if it is by calling the isEventOpen function

If funding token (token project would like to use for a liquidity pair) is native token then nativeTokenSwap function is used. 
But if It's an ERC20 token then use FundingTokenSwap. If user calls wrong function the tx will revert.

nativeTokenSwap:
    NO parameters but instead call the function with native tokens, xDai chain's native token is xDai token attached to it. 
    The value is then used and project's tokens based on the ratio are assigned to caller addres. ( less 50% which is set asside for the liquidity pool)
fundingTokenSwap:
    No parameters but the instead approve the amount of tokens you would like to give. Calling this function, transfers it to the parameters and incre

STEP 4
validateILO
can be called by anyone and is called when isEventDone == true
validates if the ILO succeeded
NO parameters

STEP 5
approveTokensForLiquidityPair
can be called by anyone, and approves tokens needed to created liquidity pool

step 6
createLiquidityPool
can be called by anyone. ILO must be validated or it reverts
once called this creates a liquidity pool on the dex chosen at time of deployment (at time of voting)
This can take some gas, because of the amount of transactions it does. But xDai makes it cheap
NO PARAMS

STEP 7
finalizeILO Can be caled by anyone
this finalizes the ILO by setting timeLocks. setting timelocks also sets block number locks by using the average block time(5 seconds on xDai),
NO Params



TODOs:


addressOfProjectToken = address type - address of project token, if address of 0 address, xStarterPoolPair will deploy one
tokenName_ = string type - used to verify project token or to set up one
tokenSymbol_ = string type - used to verify project token or set up
*** 
TODO:: add token supply to constructor of xStarterPoolPair to enforce  what was voted on 
***
totalTokenSupply_ - uint type - used to validate that project token or set totalsupply for new one 
*** 
TODO: add startBlock and endBlock and enforce that startTime must be at least 2 days or 172800 seconds 
from current AND 34560 blocks(assuming 5 second blocks on xdai from current block)
and validate endtime is at least 1 day or 86400 second and endBlock is 17280 blocks from start block
***
startTime_ = uint type - timestamp of ILO start time, contract will calculate startblock based on start time to current block time
endTime_ = uint type = timestamp of ILO end time,  contract will calculate endBlock based on endTime